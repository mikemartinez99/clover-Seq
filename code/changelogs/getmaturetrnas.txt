--- getmaturetrnas.py	(original)
+++ getmaturetrnas.py	(refactored)
@@ -56,9 +56,9 @@
             elif currline.startswith(">"):
                 pass
                 #print >>sys.stderr, currline
-        if len(gtrnatrans.keys()) == 0:
-            print >>sys.stderr, "Could not extract names from gtrnadb fasta file"
-            print >>sys.stderr, "must have names in format '>Saccharomyces_cerevisiae_tRNA-Ala-AGC-1-10 (tRNAscan-SE ID: chrXIII.trna9)'"
+        if len(list(gtrnatrans.keys())) == 0:
+            print("Could not extract names from gtrnadb fasta file", file=sys.stderr)
+            print("must have names in format '>Saccharomyces_cerevisiae_tRNA-Ala-AGC-1-10 (tRNAscan-SE ID: chrXIII.trna9)'", file=sys.stderr)
             sys.exit()
             
     
@@ -91,9 +91,9 @@
             #print >>sys.stderr,currname
             #print >>sys.stderr,currseq
             if len(namefields) != 4: #or namefields[0] != "newtRNA":
-                print >>sys.stderr, "additional tRNA "+currname+" from "+args["addtrna"] +" does not use a valid tRNA name"
-                print >>sys.stderr, "valid named in the format 'newtRNA-xxx-NNN-1-1'"
-                print >>sys.stderr, len(namefields) 
+                print("additional tRNA "+currname+" from "+args["addtrna"] +" does not use a valid tRNA name", file=sys.stderr)
+                print("valid named in the format 'newtRNA-xxx-NNN-1-1'", file=sys.stderr)
+                print(len(namefields), file=sys.stderr) 
                 sys.exit(1)
                 pass
             
@@ -145,8 +145,8 @@
         cmrun = subprocess.Popen(cmcommand, stdout = devnull)
         result = cmrun.wait()
         if result:
-            print >>sys.stderr, " ".join(cmcommand)
-            print >>sys.stderr, "Failure to align tRNAs"
+            print(" ".join(cmcommand), file=sys.stderr)
+            print("Failure to align tRNAs", file=sys.stderr)
 
             sys.exit(1)
         seqfile.close()
@@ -161,30 +161,30 @@
         #trnanames[name] = currtrans
         trnalist.append(name)
         #print >>sys.stderr, name
-        print >>maturetrnafa, ">"+name
+        print(">"+name, file=maturetrnafa)
         matureseq = currtrans.getmatureseq(addcca = not prokmode)
-        print >>maturetrnafa, str("N" * margin) +matureseq+str("N" * margin)
+        print(str("N" * margin) +matureseq+str("N" * margin), file=maturetrnafa)
         locinames = ",".join(currlocus.name for currlocus in currtrans.loci)
         if locinames == "":
             locinames = "NA"
         if trnatable is not None:
-            print >>trnatable, "\t".join([name,locinames,currtrans.amino,currtrans.anticodon])
+            print("\t".join([name,locinames,currtrans.amino,currtrans.anticodon]), file=trnatable)
         if trnabed is not None:
             transcriptrange = GenomeRange("genome", name, margin, margin + len(matureseq), strand = "+", name = name)
-            print >>trnabed, transcriptrange.bedstring()
+            print(transcriptrange.bedstring(), file=trnabed)
         if args["locibed"]:
             itemrgb = "0"
             for currlocus in currtrans.loci:
                 pass
                 trnalength = currlocus.loc.end - currlocus.loc.start
                 if currlocus.intron is None:
-                    print >>locibed, currlocus.loc.bedstring()+"\t"+"\t".join([str(currlocus.loc.start), str(currlocus.loc.end),itemrgb,"1",str(trnalength),"0"])
+                    print(currlocus.loc.bedstring()+"\t"+"\t".join([str(currlocus.loc.start), str(currlocus.loc.end),itemrgb,"1",str(trnalength),"0"]), file=locibed)
                 else:
                     
                     blockcounts = 2
                     blocksizes = str(currlocus.intron[0] + 1)+","+str(trnalength - currlocus.intron[1] - 1)
                     blockstarts = "0,"+str(currlocus.intron[1] + 1)
-                    print >>locibed, currlocus.loc.bedstring()+"\t"+"\t".join([str(currlocus.loc.start), str(currlocus.loc.end),itemrgb,str(blockcounts),str(blocksizes),str(blockstarts)])
+                    print(currlocus.loc.bedstring()+"\t"+"\t".join([str(currlocus.loc.start), str(currlocus.loc.end),itemrgb,str(blockcounts),str(blocksizes),str(blockstarts)]), file=locibed)
 
     
     
